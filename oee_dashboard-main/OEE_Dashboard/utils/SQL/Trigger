-- =================================================================
-- SCRIPT FOR OEE DATABASE (COMPATIBLE WITH SQL SERVER 2012)
-- DATE: 20/06/2025
-- =================================================================

-- Use the target database
USE [oee_db]
GO

-- =================================================================
-- 1. DATA STANDARDIZATION TRIGGERS (INSTEAD OF INSERT)
--    (ทริกเกอร์สำหรับแปลงข้อมูลเป็นตัวพิมพ์ใหญ่ก่อนบันทึก)
-- =================================================================

-- Trigger: Convert new parameter data to uppercase
IF OBJECT_ID('dbo.trg_UppercasePara', 'TR') IS NOT NULL
    DROP TRIGGER dbo.trg_UppercasePara;
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE TRIGGER [dbo].[trg_UppercasePara]
ON [dbo].[IOT_TOOLBOX_PARAMETER]
INSTEAD OF INSERT
AS
BEGIN
    INSERT INTO IOT_TOOLBOX_PARAMETER (line, model, part_no, planned_output, updated_at, sap_no)
    SELECT 
        UPPER(line),
        UPPER(model),
        UPPER(part_no),
        planned_output,
        updated_at,
        UPPER(sap_no)
    FROM inserted;
END
GO

-- Trigger: Convert new parts data to uppercase
IF OBJECT_ID('dbo.trg_UppercaseParts', 'TR') IS NOT NULL
    DROP TRIGGER dbo.trg_UppercaseParts;
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE TRIGGER [dbo].[trg_UppercaseParts]
ON [dbo].[IOT_TOOLBOX_PARTS]
INSTEAD OF INSERT
AS
BEGIN
    INSERT INTO IOT_TOOLBOX_PARTS (log_date, log_time, model, line, part_no, lot_no, count_type, count_value, note)
    SELECT 
        log_date,
        log_time,
        UPPER(model),
        UPPER(line),
        UPPER(part_no),
        lot_no,
        UPPER(count_type),
        count_value,
        note
    FROM inserted;
END
GO

-- Trigger: Convert new stop cause data to uppercase
IF OBJECT_ID('dbo.trg_UppercaseStop', 'TR') IS NOT NULL
    DROP TRIGGER dbo.trg_UppercaseStop;
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE TRIGGER [dbo].[trg_UppercaseStop]
ON [dbo].[IOT_TOOLBOX_STOP_CAUSES]
INSTEAD OF INSERT
AS
BEGIN
    INSERT INTO IOT_TOOLBOX_STOP_CAUSES (log_date, stop_begin, stop_end, line, machine, cause, note, recovered_by)
    SELECT 
        log_date,
        stop_begin,
        stop_end,
        UPPER(line),
        UPPER(machine),
        cause,
        note,
        recovered_by
    FROM inserted;
END
GO

-- =================================================================
-- 2. AUDIT LOGGING TRIGGERS (AFTER INSERT, UPDATE, DELETE)
--    (ทริกเกอร์สำหรับบันทึกประวัติการเปลี่ยนแปลงข้อมูล)
-- =================================================================

-- Trigger for IOT_TOOLBOX_PARTS (Insert, Update, Delete)
IF OBJECT_ID('dbo.trg_Audit_IOT_TOOLBOX_PARTS', 'TR') IS NOT NULL
    DROP TRIGGER dbo.trg_Audit_IOT_TOOLBOX_PARTS;
GO
CREATE TRIGGER trg_Audit_IOT_TOOLBOX_PARTS
ON IOT_TOOLBOX_PARTS
AFTER INSERT, UPDATE, DELETE
AS
BEGIN
    SET NOCOUNT ON;

    -- Log for INSERT
    INSERT INTO IOT_TOOLBOX_USER_LOGS (action_by, action_type, target_user, detail, created_at)
    SELECT SYSTEM_USER, 'INSERT', NULL, CONCAT('Parts added: ', part_no), GETDATE()
    FROM inserted
    WHERE NOT EXISTS (SELECT 1 FROM deleted WHERE deleted.id = inserted.id);

    -- Log for UPDATE
    INSERT INTO IOT_TOOLBOX_USER_LOGS (action_by, action_type, target_user, detail, created_at)
    SELECT SYSTEM_USER, 'UPDATE', NULL, CONCAT('Parts updated: ', part_no), GETDATE()
    FROM inserted
    WHERE EXISTS (SELECT 1 FROM deleted WHERE deleted.id = inserted.id);

    -- Log for DELETE
    INSERT INTO IOT_TOOLBOX_USER_LOGS (action_by, action_type, target_user, detail, created_at)
    SELECT SYSTEM_USER, 'DELETE', NULL, CONCAT('Parts deleted: ', part_no), GETDATE()
    FROM deleted
    WHERE NOT EXISTS (SELECT 1 FROM inserted WHERE inserted.id = deleted.id);
END
GO

-- Trigger for IOT_TOOLBOX_USERS (Insert, Update, Delete)
IF OBJECT_ID('dbo.trg_Audit_IOT_TOOLBOX_USERS', 'TR') IS NOT NULL
    DROP TRIGGER dbo.trg_Audit_IOT_TOOLBOX_USERS;
GO
CREATE TRIGGER trg_Audit_IOT_TOOLBOX_USERS
ON IOT_TOOLBOX_USERS
AFTER INSERT, UPDATE, DELETE
AS
BEGIN
    SET NOCOUNT ON;

    -- Log for INSERT
    INSERT INTO IOT_TOOLBOX_USER_LOGS (action_by, action_type, target_user, detail, created_at)
    SELECT SYSTEM_USER, 'INSERT', username, 'User created', GETDATE()
    FROM inserted
    WHERE NOT EXISTS (SELECT 1 FROM deleted WHERE deleted.id = inserted.id);

    -- Log for UPDATE
    INSERT INTO IOT_TOOLBOX_USER_LOGS (action_by, action_type, target_user, detail, created_at)
    SELECT SYSTEM_USER, 'UPDATE', username, 'User updated', GETDATE()
    FROM inserted
    WHERE EXISTS (SELECT 1 FROM deleted WHERE deleted.id = inserted.id);

    -- Log for DELETE
    INSERT INTO IOT_TOOLBOX_USER_LOGS (action_by, action_type, target_user, detail, created_at)
    SELECT SYSTEM_USER, 'DELETE', username, 'User deleted', GETDATE()
    FROM deleted
    WHERE NOT EXISTS (SELECT 1 FROM inserted WHERE inserted.id = deleted.id);
END
GO

-- Trigger for IOT_TOOLBOX_PARAMETER (Insert, Update, Delete)
IF OBJECT_ID('dbo.trg_Audit_IOT_TOOLBOX_PARAMETER', 'TR') IS NOT NULL
    DROP TRIGGER dbo.trg_Audit_IOT_TOOLBOX_PARAMETER;
GO
CREATE TRIGGER trg_Audit_IOT_TOOLBOX_PARAMETER
ON IOT_TOOLBOX_PARAMETER
AFTER INSERT, UPDATE, DELETE
AS
BEGIN
    SET NOCOUNT ON;

    -- Log for INSERT
    INSERT INTO IOT_TOOLBOX_USER_LOGS (action_by, action_type, target_user, detail, created_at)
    SELECT SYSTEM_USER, 'INSERT', NULL, CONCAT('Parameter added: ', line, '-', model, '-', part_no), GETDATE()
    FROM inserted
    WHERE NOT EXISTS (SELECT 1 FROM deleted WHERE deleted.id = inserted.id);

    -- Log for UPDATE
    INSERT INTO IOT_TOOLBOX_USER_LOGS (action_by, action_type, target_user, detail, created_at)
    SELECT SYSTEM_USER, 'UPDATE', NULL, CONCAT('Parameter updated: ', line, '-', model, '-', part_no), GETDATE()
    FROM inserted
    WHERE EXISTS (SELECT 1 FROM deleted WHERE deleted.id = inserted.id);

    -- Log for DELETE
    INSERT INTO IOT_TOOLBOX_USER_LOGS (action_by, action_type, target_user, detail, created_at)
    SELECT SYSTEM_USER, 'DELETE', NULL, CONCAT('Parameter deleted: ', line, '-', model, '-', part_no), GETDATE()
    FROM deleted
    WHERE NOT EXISTS (SELECT 1 FROM inserted WHERE inserted.id = deleted.id);
END
GO

-- Trigger for IOT_TOOLBOX_STOP_CAUSES (Insert, Update, Delete)
IF OBJECT_ID('dbo.trg_Audit_IOT_TOOLBOX_STOP_CAUSES', 'TR') IS NOT NULL
    DROP TRIGGER dbo.trg_Audit_IOT_TOOLBOX_STOP_CAUSES;
GO
CREATE TRIGGER trg_Audit_IOT_TOOLBOX_STOP_CAUSES
ON IOT_TOOLBOX_STOP_CAUSES
AFTER INSERT, UPDATE, DELETE
AS
BEGIN
    SET NOCOUNT ON;

    -- Log for INSERT
    INSERT INTO IOT_TOOLBOX_USER_LOGS (action_by, action_type, target_user, detail, created_at)
    SELECT SYSTEM_USER, 'INSERT', NULL, CONCAT('Stop cause added: ', line, ' - ', machine), GETDATE()
    FROM inserted
    WHERE NOT EXISTS (SELECT 1 FROM deleted WHERE deleted.id = inserted.id);

    -- Log for UPDATE
    INSERT INTO IOT_TOOLBOX_USER_LOGS (action_by, action_type, target_user, detail, created_at)
    SELECT SYSTEM_USER, 'UPDATE', NULL, CONCAT('Stop cause updated: ', line, ' - ', machine), GETDATE()
    FROM inserted
    WHERE EXISTS (SELECT 1 FROM deleted WHERE deleted.id = inserted.id);

    -- Log for DELETE
    INSERT INTO IOT_TOOLBOX_USER_LOGS (action_by, action_type, target_user, detail, created_at)
    SELECT SYSTEM_USER, 'DELETE', NULL, CONCAT('Stop cause deleted: ', line, ' - ', machine), GETDATE()
    FROM deleted
    WHERE NOT EXISTS (SELECT 1 FROM inserted WHERE inserted.id = deleted.id);
END
GO


-- =================================================================
-- 3. VIEWS FOR REPORTING
--    (วิวสำหรับทำรายงาน)
-- =================================================================

-- Daily Summary View
IF OBJECT_ID('dbo.vw_Daily_Part_Summary', 'V') IS NOT NULL
    DROP VIEW dbo.vw_Daily_Part_Summary;
GO
CREATE VIEW vw_Daily_Part_Summary AS
SELECT 
    log_date,
    model,
    part_no,
    count_type,
    SUM(count_value) AS total_count
FROM IOT_TOOLBOX_PARTS
GROUP BY log_date, model, part_no, count_type;
GO

-- Stop Cause Duration Summary View
IF OBJECT_ID('dbo.vw_Stop_Cause_Summary', 'V') IS NOT NULL
    DROP VIEW dbo.vw_Stop_Cause_Summary;
GO
CREATE VIEW vw_Stop_Cause_Summary AS
SELECT 
    log_date,
    line,
    machine,
    cause,
    SUM(DATEDIFF(MINUTE, stop_begin, stop_end)) AS total_minutes
FROM IOT_TOOLBOX_STOP_CAUSES
GROUP BY log_date, line, machine, cause;
GO

-- =================================================================
-- 4. STORED PROCEDURES
--    (ชุดคำสั่งสำเร็จรูป)
-- =================================================================

-- Procedure to Add a New User
IF OBJECT_ID('dbo.sp_AddUser', 'P') IS NOT NULL
    DROP PROCEDURE dbo.sp_AddUser;
GO
CREATE PROCEDURE sp_AddUser
    @username VARCHAR(100),
    @password NVARCHAR(255),
    @role VARCHAR(50) = 'user'
AS
BEGIN
    INSERT INTO IOT_TOOLBOX_USERS (username, password, role, created_at)
    VALUES (@username, @password, @role, GETDATE());
END
GO

-- Procedure to Update Planned Output
IF OBJECT_ID('dbo.sp_UpdatePlannedOutput', 'P') IS NOT NULL
    DROP PROCEDURE dbo.sp_UpdatePlannedOutput;
GO
CREATE PROCEDURE sp_UpdatePlannedOutput
    @id INT,
    @planned_output INT
AS
BEGIN
    UPDATE IOT_TOOLBOX_PARAMETER
    SET planned_output = @planned_output,
        updated_at = GETDATE()
    WHERE id = @id;
END
GO

PRINT 'SQL script for SQL Server 2012 has been successfully prepared.'